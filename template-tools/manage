#! /usr/bin/env python3
# -*- python -*-

####################################################################################################
#
# Copyright (C) 2017 Fabrice Salvaire
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
####################################################################################################

####################################################################################################

from datetime import datetime

import argparse
import glob
import os
import re
import shutil
import stat
import subprocess
import tempfile

####################################################################################################

program_path = os.path.abspath(__file__)
source_path = os.path.dirname(os.path.dirname(program_path))

####################################################################################################

argument_parser = argparse.ArgumentParser(description='Install Package Template')

argument_parser.add_argument('--path',
                             required=True,
                             help='destination path')

argument_parser.add_argument('--package-name',
                             required=True,
                             help='package name')

# @domain@
# @licence_header_description@
# @project_url@

argument_parser.add_argument('--install',
                             action='store_true', default=False,
                             help='install')

argument_parser.add_argument('--dry-run',
                             action='store_true', default=False,
                             help='dry run')

argument_parser.add_argument('--force',
                             action='store_true', default=False,
                             help='overwrite destination')

argument_parser.add_argument('--pattern',
                             default=None,
                             help='file pattern')

argument_parser.add_argument('--compare',
                             action='store_true', default=False,
                             help='compare')

argument_parser.add_argument('--source-path',
                             default=source_path,
                             help='source path')

args = argument_parser.parse_args()

####################################################################################################

class Installer:

    ##############################################

    def __init__(self, source_path, destination_path, variables):

        self._source_path = source_path
        self._destination_path = destination_path

        self._variables = {'@{}@'.format(key):value for key, value in variables.items()}

    ##############################################

    def is_excluded(self, path):

        return (
            path.endswith('~')
            or path.startswith('.git/')
            or path.startswith('template-tools/')
            or path.startswith('old-template-tools/')
            or path.endswith('.pyc')
            or path == 'README.md'
        )

    ##############################################

    def sources(self):

        for path, directories, files in os.walk(self._source_path):
            for file_name in files:
                absolut_path = os.path.join(path, file_name)
                relative_path = os.path.relpath(absolut_path, self._source_path)
                if not self.is_excluded(relative_path):
                    yield relative_path

    ##############################################

    def replace_variables(self, text):

        for variable, value in self._variables.items():
            text = text.replace(variable, value)

        return text

    ##############################################

    def absolut_path(self, relative_path):

        return os.path.join(self._source_path, relative_path)

    ##############################################

    def destination_path(self, relative_path):

        if '@' in relative_path:
            dst_relative_path = self.replace_variables(relative_path)
        else:
            dst_relative_path = relative_path
        dst_absolut_path = os.path.join(self._destination_path, dst_relative_path)

        return dst_absolut_path, dst_relative_path

    ##############################################

    def content(self, path):

        basename, extension = os.path.splitext(path)
        if extension not in ('.png',):
            with open(path, 'r') as fh:
                content = fh.read()
            if '@' in content:
                content = self.replace_variables(content)
            return content
        else:
            return None

    ##############################################

    def install_source(self, relative_path, force=False, dry_run=False):

        dst_absolut_path, dst_relative_path = self.destination_path(relative_path)
        print(relative_path, '->', dst_relative_path)

        if not dry_run:
            if os.path.exists(dst_absolut_path):
                if force:
                    backup_path = dst_absolut_path + '-backup'
                    number = len(glob.glob(backup_path + '*'))
                    backup_path += str(number)
                    os.rename(dst_absolut_path, backup_path)
                    print('backup', backup_path)
                else:
                    # raise NameError('Destination exists:', dst_absolut_path)
                    print('WARNING Destination exists:', dst_absolut_path)
                    return

            path = os.path.dirname(dst_absolut_path)
            if not os.path.exists(path):
                os.makedirs(path, mode=0o775) # exist_ok=False

            absolut_path = self.absolut_path(relative_path)
            content = self.content(absolut_path)
            if content is None:
                shutil.copy(absolut_path, dst_absolut_path)
            else:
                with open(dst_absolut_path, 'w') as fh:
                    fh.write(content)

            # mode = (stat.S_IRUSR | stat.S_IWUSR |
            #         stat.S_IRGRP | stat.S_IWGRP |
            #         stat.S_IROTH | stat.S_IWOTH )
            mode = 0o664
            if os.access(absolut_path, os.X_OK):
                # mode |= (stat.S_IXUSR |
                #         stat.S_IXGRP |
                #         stat.S_IXOTH )
                mode = 0o775
            os.chmod(dst_absolut_path, mode)

    ##############################################

    def install(self, force=False, pattern=None, dry_run=False):

        if pattern is not None:
            regexp = re.compile(pattern)
        else:
            regexp = None

        if not os.path.exists(self._destination_path):
            os.makedirs(self._destination_path)
        elif not force:
            # raise NameError("Destination exists")
            print("WARNING: Destination exists")

        for path in installer.sources():
            if regexp and not regexp.match(path):
                continue
            self.install_source(path, force, dry_run)

    ##############################################

    def compare_source(self, relative_path, tmp_dirname):

        dst_absolut_path, dst_relative_path = self.destination_path(relative_path)
        # print(relative_path, 'vs', dst_relative_path)

        if not os.path.exists(dst_absolut_path):
            print('Missing', dst_relative_path)
        else:
            absolut_path = self.absolut_path(relative_path)

            content = self.content(absolut_path)
            if content is None:
                source = absolut_path
            else:
                source = os.path.join(tmp_dirname, relative_path)
                dirname = os.path.dirname(source)
                if not os.path.exists(dirname):
                    os.makedirs(dirname)
                with open(source, 'w') as fh:
                    fh.write(content)

            subprocess.call(('diff', '-Naur', source, dst_absolut_path))

    ##############################################

    def compare(self):

        with tempfile.TemporaryDirectory() as tmp_dirname:
            for path in installer.sources():
                self.compare_source(path, tmp_dirname)

####################################################################################################

variables = dict(
    package_name=args.package_name,
    year=str(datetime.now().year),
)

installer = Installer(args.source_path, os.path.realpath(args.path), variables)

if args.install:
    installer.install(force=args.force, pattern=args.pattern, dry_run=args.dry_run)
elif args.compare:
    installer.compare()
